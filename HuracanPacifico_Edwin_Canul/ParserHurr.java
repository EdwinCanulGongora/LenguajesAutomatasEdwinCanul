/* ParserHurr.java */
/* Generated By:JavaCC: Do not edit this line. ParserHurr.java */
class ParserHurr implements ParserHurrConstants {
        public static void main (String[] args) throws ParseException{
                try {
                        ParserHurr compilador = new ParserHurr(System.in);
                        compilador.ejecutar();
                        //System.out.println("Se ha compilado con exito");
                }
                catch(ParseException e) {
                                        System.out.println("Error: ");
                        System.out.println(e.getMessage());

                }
        }

//Columnas requeridas para los datos de los huracanes
  static final public void columns() throws ParseException {
System.out.println("ocean,numCycl,year,name,numTrcks,yearTrck,monthTrck,dayTrck,hourTrck,minutsTrck,recordId,statusSys,"
        +"latitude,longitude,maxSustWin,minPress,34ktNE,34ktSE,34ktSW,34ktNW,50ktNE,50ktSE,50ktSW,50ktNW,64ktNE,64ktSE,64ktSW,64ktNW,radMaxWind");
  }

//método que almacena datos generales del huracán, identificador,número de ciclon, año y nombre
  static final public String saveOcean() throws ParseException {//Token temporal a utilizar para obtener los datos generales del huracán
        Token arrOcean;
        //variable para almacenarlos
        String save;
    arrOcean = jj_consume_token(oceanID);
save = arrOcean.image.toString();
                String subString = save.substring(0,2);//subString= "EP"

                String subString2 = save.substring(2,4);//subString2= "01"

        String subString3 = save.substring(4,8);//subString3= "1949"

                save= subString + "," + subString2 + "," + subString3 + ",";//Formato con la que se almacenarán los datos save= "AL,01,1851,"

    arrOcean = jj_consume_token(namH);
save += arrOcean.image;//save ="UNNAMED"
                {if ("" != null) return save;}//retornando los datos

    throw new Error("Missing return statement in function");
  }

  static final public String saveDate() throws ParseException {//Token temporales para la fecha, identificador de registro,latitud y longitud
        Token tempDate,longitude,latitude,recId;
        //Token de los datos de viento del huracán
        Token maxSustWin,minPress,ktNE34, ktSE34,ktSW34, ktNW34, ktNE50, ktSE50, ktSW50,ktNW50, ktNE64, ktSE64,ktSW64,ktNW64, radMaxWind;
    //Variables a utilizar para los datos de la fecha y radio maximo de viento
        String save="",strRadMaxWind="";
    tempDate = jj_consume_token(date);
//Fechas
                String str2 = tempDate.image.toString();
                String[] divide = str2.split(",",2);//dividiendo la fecha
                String num1 = divide[0];

        //datos de fechas
                String num2 = num1.substring(0,4); //num2= "1949" año

                String num3 = num1.substring(4,6); //num3= "06" mes

                String num4 = num1.substring(6,8); //num4 ="11" día

        //Horas y minutos
                String num5 = divide[1];//obtiendo la lista que contiene la hora "0000"

                String num6 = num5.substring(0,2);//num6= "00"

                String num7 = num5.substring(3,4);//num7= "00"

                save= num2 +","+num3+","+num4+","+num6+","+num7+",";//Formato para acomodar la fecha y hora save= "1949,06,11,00,00,"

    //obteniendo el valor del identificador de registro agregandolo a la variable save
            recId = jj_consume_token(recordID);
save += recId;
    //latitud
            latitude = jj_consume_token(lat);
//Latitud del huracán
                //definiendo el valor de latitud a string mediante image almacenandolo en str3
                String str3=latitude.image.toString();
                //obteniedo la lista del latitud
                String[] divide2 =str3.split(",");
                //variable que establece donde se almacenará
                String numbers =divide2[0];
        //obteniendo la latitud de tal forma que no se agregue la letra final, en este caso N(North)
                String numb=numbers.substring(0,5);
                //guardando en save
                save += numb+",";//save ="20.2"

    longitude = jj_consume_token(lon);
//longitud del huracán
                //definiendo el valor de latitud a string mediante image almacenandolo en str4
                String str4=longitude.image.toString();
                /*//obteniedo la lista del longitud
		String[] divide3 =str4.split(",");
		//variable que establece donde se almacenará
		String numbers2 =divide3[0];
        //obteniendo la longitud de tal forma que no se agregue la letra final, en este caso W(West), ademas de agregar la dirección correcta
		String numb2=numbers2.substring(0,6);
		//guardando en save
		save += "-"+numb2+",";//save ="-106.3"*/
                if(str4.contains("W")){
                        str4=str4.replace("W","");

                }else{
                        str4=str4.replace("E","");
                }

                save += str4;
                {if ("" != null) return save;}//retornar valor

    throw new Error("Missing return statement in function");
  }

//método que rellena las demas columnas faltantes
  static final public String fillColumns() throws ParseException {//tokens temporales definidos de tal manera que unicamente se rellenen las columnas deseadas
        Token maxSustWin,minPress,ktNE34, ktSE34,ktSW34, ktNW34, ktNE50, ktSE50, ktSW50,ktNW50, ktNE64, ktSE64,ktSW64,ktNW64, radMaxWind;
        //variables a utilizar para almacenar
        String save="",strRadMaxWind="";
    maxSustWin = jj_consume_token(FILLCOLUMNS);
save += maxSustWin;
    // save= "45"
                    minPress = jj_consume_token(FILLCOLUMNS);
save += minPress;//save= "N/A"

    ktNE34 = jj_consume_token(FILLCOLUMNS);
save += ktNE34;//save= "N/A"

    ktSE34 = jj_consume_token(FILLCOLUMNS);
save += ktSE34;//save= "N/A"

    ktSW34 = jj_consume_token(FILLCOLUMNS);
save += ktSW34;//save= "N/A"

    ktNW34 = jj_consume_token(FILLCOLUMNS);
save += ktNW34;//save= "N/A"

    ktNE50 = jj_consume_token(FILLCOLUMNS);
save += ktNE50;//save= "N/A"

    ktSE50 = jj_consume_token(FILLCOLUMNS);
save += ktSE50;//save= "N/A" 

    ktSW50 = jj_consume_token(FILLCOLUMNS);
save += ktSW50;//save= "N/A" 

    ktNW50 = jj_consume_token(FILLCOLUMNS);
save += ktNW50;//save= "N/A" 

    ktNE64 = jj_consume_token(FILLCOLUMNS);
save += ktNE64;//save= "N/A" 

    ktSE64 = jj_consume_token(FILLCOLUMNS);
save += ktSE64;//save= "N/A" 

    ktSW64 = jj_consume_token(FILLCOLUMNS);
save += ktSW64;//save= "N/A" 

    ktNW64 = jj_consume_token(FILLCOLUMNS);
save += ktNW64;//save= "N/A" 

    radMaxWind = jj_consume_token(FILLCOLUMNS);
strRadMaxWind = ktNW64.image.toString();
                                strRadMaxWind = strRadMaxWind.replace(",", "");
                                save += strRadMaxWind;//save= "N/A"
                                {if ("" != null) return save;}//retornando valores de las demas columnas

    throw new Error("Missing return statement in function");
  }

//método que imprimirá los datos de todas las columnas
  static final public void printAll() throws ParseException {String printOc, printDate,printColl;
    label_1:
    while (true) {
      printOc = saveOcean();
      label_2:
      while (true) {
        printDate = saveDate();
        label_3:
        while (true) {
          printColl = fillColumns();
System.out.println(printOc+printDate+printColl);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FILLCOLUMNS:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_3;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case date:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case oceanID:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

//método que ejecuta el programa
  static final public void ejecutar() throws ParseException {
    columns();
    printAll();
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserHurrTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x400000,0x100000,};
   }

  /** Constructor with InputStream. */
  public ParserHurr(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserHurr(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserHurrTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserHurr(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserHurrTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserHurr(ParserHurrTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserHurrTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
